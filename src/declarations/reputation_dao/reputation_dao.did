type UserDecayInfo = 
 record {
   lastActivityTime: nat;
   lastDecayTime: nat;
   registrationTime: nat;
   totalDecayed: nat;
 };
type TransactionType = 
 variant {
   Award;
   Decay;
   Revoke;
 };
type Transaction = 
 record {
   amount: nat;
   from: principal;
   id: nat;
   reason: opt text;
   timestamp: nat;
   to: principal;
   transactionType: TransactionType;
 };
type OrgStats = 
 record {
   admin: principal;
   awarderCount: nat;
   totalPoints: nat;
   totalTransactions: nat;
   userCount: nat;
 };
type OrgID = text;
type DecayConfig = 
 record {
   decayInterval: nat;
   decayRate: nat;
   enabled: bool;
   gracePeriod: nat;
   minThreshold: nat;
 };
type Awarder = 
 record {
   id: principal;
   name: text;
 };
service : {
  /// Add a trusted awarder (only admin can call this)
  addOrgTrustedAwarder: (orgId: OrgID, awarder: principal, name: text) ->
   (text);
  addTrustedAwarder: (orgId: OrgID, p: principal, name: text) -> (text);
  applyDecayToSpecificUser: (p: principal) -> (text);
  /// Award reputation to a user in an organization
  awardOrgRep: (orgId: OrgID, to: principal, amount: nat, reason:
   opt text) -> (text);
  awardRep: (orgId: OrgID, to: principal, amount: nat, reason: opt text) ->
   (text);
  configureDecay: (decayRate: nat, decayInterval: nat, minThreshold: 
   nat, gracePeriod: nat, enabled: bool) -> (text);
  /// Get all organizations
  getAllOrgs: () -> (vec OrgID) query;
  getBalance: (orgId: OrgID, p: principal) -> (opt nat) query;
  getBalanceWithDetails: (p: principal) ->
   (record {
      currentBalance: nat;
      decayInfo: opt UserDecayInfo;
      pendingDecay: nat;
      rawBalance: nat;
    }) query;
  getDecayConfig: () -> (DecayConfig) query;
  getDecayStatistics: () ->
   (record {
      configEnabled: bool;
      lastGlobalDecayProcess: nat;
      totalDecayedPoints: nat;
    }) query;
  /// Get organization admin
  getOrgAdmin: (orgId: OrgID) -> (opt principal) query;
  /// Get user balance in an organization
  getOrgBalance: (orgId: OrgID, user: principal) -> (opt nat) query;
  /// Get organization stats
  getOrgStats: (orgId: OrgID) -> (opt OrgStats) query;
  /// Get organization transaction history
  getOrgTransactions: (orgId: OrgID) -> (opt vec Transaction) query;
  /// Get all trusted awarders for an organization
  getOrgTrustedAwarders: (orgId: OrgID) -> (opt vec Awarder) query;
  getRawBalance: (p: principal) -> (nat) query;
  getTransactionById: (orgId: OrgID, id: nat) -> (opt Transaction) query;
  getTransactionCount: (orgId: OrgID) -> (opt nat) query;
  getTransactionHistory: (orgId: OrgID) -> (opt vec Transaction) query;
  getTransactionsByUser: (orgId: OrgID, user: principal) ->
   (opt vec Transaction) query;
  getTrustedAwarders: (orgId: OrgID) -> (opt vec Awarder) query;
  getUserDecayInfo: (p: principal) -> (opt UserDecayInfo) query;
  /// Check if user is a trusted awarder in an organization
  isOrgTrustedAwarderQuery: (orgId: OrgID, user: principal) ->
   (opt bool) query;
  previewDecayAmount: (p: principal) -> (nat) query;
  processBatchDecay: () -> (text);
  /// Register a new organization
  registerOrg: (orgId: OrgID) -> (text);
  removeTrustedAwarder: (orgId: OrgID, p: principal) -> (text);
  /// Revoke reputation from a user in an organization (only admin)
  revokeOrgRep: (orgId: OrgID, from: principal, amount: nat, reason:
   opt text) -> (text);
  revokeRep: (orgId: OrgID, from: principal, amount: nat, reason:
   opt text) -> (text);
}
